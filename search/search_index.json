{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MSA Docs Study Case: HR System","text":"<p>This study case contains the HR System documentation, which is a fictional human resources system focused on payroll features of the MARVEL<sup>1</sup> organization. In MARVEL, the human resources area is subdivided into three main areas: registration and maintenance of functional records, payment and benefits to employees, and personnel development.</p> <p>Despite this focus on payroll, the system has features of the employees registering domain to allow the registration of the employees that will be considered in MARVEL's organization payroll. For the system user, the system has two macro requirements:</p> <ol> <li> <p>To function as HR management system, and;</p> </li> <li> <p>Allow integration of other systems with the data managed on the system.</p> </li> </ol> <p>This is a web-based system built on the Microservice Architecture, consisting of various services and user interfaces, as described in this documentation. Despite this modularization, the system is viewed by the user as a single software, so that the modularization is not perceived.</p> <ol> <li> <p>Fictional Organization\u00a0\u21a9</p> </li> </ol>"},{"location":"about-rh/","title":"About the HR Project Documentation","text":"<p>In this repository there is an instance of a framework proposal for the documentation of systems built using microservices, as proposed in the paper Microservices Documentation Proposal<sup>1</sup>. Therefore the navigation represents an instance in a case study of the HR system, in which it was tested for framework validation in the article.</p> <p>In this framework, the documentation is build according to the desired view. The following structure describes how the structure of the documents in this system is arranged according to the strategy of the views:</p> <ul> <li><code>Solution</code> - Documentation of the software design solution level.</li> <li><code>Modules</code> - Documentation of individual architecture modules.</li> <li><code>Interface</code> - Documentation of module interfaces and system interactions.</li> </ul> <ol> <li> <p>Insert article full text link.\u00a0\u21a9</p> </li> </ol>"},{"location":"interfaces/about/","title":"About HR Project Interfaces","text":"<p>Some of HR Project services are built with an API format (Application Programming Interface), due to this technology and the need to document comprehensively the interfaces the API Blueprint language was chosen to document these systems.</p> <p>This way we can write the blueprint in the chosen language format and easily transform it into markdown documents (that are part of this system), making them easy to write, to update and to deploy.</p> <p>The following interfaces are documented in the API Blueprint format:</p> <ul> <li>Interface - Auth API</li> <li>Interface - Paycheck API</li> <li>Interface - Register API</li> <li>Interface - Vacation API</li> </ul>"},{"location":"interfaces/api-auth/","title":"Auth","text":"<p>Auth is a API using Keycloack and JWT to authenticate and manage users in the RH App Domain. You can view his documentation over at API Auth Module.</p> <p>API Link: Auth Apiary</p> <p>This API blueprint resource can be found at API Auth Blueprint.</p>"},{"location":"interfaces/api-auth/#auth-api-root-","title":"Auth API Root [/]","text":"<p>This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body.</p> <p>It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details.</p>"},{"location":"interfaces/api-auth/#retrieve-the-entry-point-get","title":"Retrieve the Entry Point [GET]","text":"<ul> <li>Response 200 (application/json)<pre><code>{\n    \"session\": \"/session\"\n    \"user\": \"/user\"\n}\n</code></pre> </li> </ul>"},{"location":"interfaces/api-auth/#group-session","title":"Group Session","text":"<p>Resources related to sessions in the API.</p>"},{"location":"interfaces/api-auth/#session-session","title":"Session [/session]","text":"<p>A Session object has the following attributes:</p> <ul> <li>email</li> <li>password</li> </ul>"},{"location":"interfaces/api-auth/#create-a-new-session-post","title":"Create a new Session [POST]","text":"<p>You may create a new session using this action. It takes a JSON object containing the user identifer and his password.</p> <ul> <li>email (string) - The user e-mail</li> <li> <p>password (string) - The user password for authentication</p> </li> <li> <p>Request (application/json)</p> <pre><code>{\n    \"email\": \"miles.morales@email.com\"\n    \"password\": \"spidermanrules!\"\n}\n</code></pre> </li> <li> <p>Response 201 (application/json)</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"access_token\":eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6Im1pbGVzLm1vcmFsZXNAZW1haWwuY29tIiwicGFzc3dvcmQiOiJzcGlkZXJtYW5ydWxlcyEiLCJqdGkiOiJmZTllN2Y1NC0zNTIzLTRhYTgtOTg5Yi1kYzhhM2RkYjA3ODYiLCJpYXQiOjE1Njk1MDg3NDQsImV4cCI6MTU2OTUxMjM0NH0.K-rncSvY9v-x2tQC0cIekhw4yqGfW3i4MEyIS1ljn54\n    }\n</code></pre> </li> <li> <p>Response 401 (application/json)</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"message\": \"You're not allowed to perform this action\"\n    }\n</code></pre> </li> <li> <p>Response 404 (application/json)</p> </li> <li> <p>Body</p> <pre><code>     {\n        \"message\": \"User not found!\"\n     }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-auth/#group-user","title":"Group User","text":""},{"location":"interfaces/api-auth/#user-session","title":"User Session","text":"<p>Resources related to users in the API</p>"},{"location":"interfaces/api-auth/#user-useruser_id","title":"User [/user/{user_id}]","text":"<p>A User object has the following attributes:</p> <ul> <li>name</li> <li>created_at - A RFC3339 date when the user was created.</li> <li>updated_at - A RFC339 date when the user was updated.</li> <li>email - A string with user e-mail</li> <li>groups - An array of groups identifiers which user has access.</li> <li> <p>url</p> </li> <li> <p>Parameters</p> </li> <li>user_id: 1 (required, uuid) - ID of the User in form of an UUID</li> </ul>"},{"location":"interfaces/api-auth/#view-a-user-detail-get","title":"View a User Detail [GET]","text":"<ul> <li>Response 200 (application/json)<pre><code>{\n    \"name\": \"Peter Parker\",\n    \"created_at\": \"2014-11-11T08:40:51.620Z\",\n    \"updated_at\": \"2018-08-21T21:16:09.712Z\",\n    \"email\": \"peter.parker@email.com\",\n    \"groups\": [\n      \"worker\",\n      \"heroes\"\n    ]\n    \"url\": \"/user/83883e79-65f1-42bc-82ce-33615b47fcca\",\n}\n</code></pre> </li> </ul>"},{"location":"interfaces/api-auth/#create-a-new-user-post","title":"Create a new User [POST]","text":"<p>You may create a new user (if you have this permission) using this action. It takes a JSON object containing a user and all his infos. On this action you don't have to add <code>{user_id}</code> in the URL.</p> <ul> <li>name (string) - The user name</li> <li>email (string) - The user e-mail</li> <li> <p>groups (array[string]) - The list of groups which the user will have access</p> </li> <li> <p>Request (application/json)</p> <pre><code>{\n    \"name\": \"Miles Morales\",\n    \"email\": \"miles.morales@email.com\"\n    \"groups\": [\n        \"workers\",\n        \"heroes\",\n        \"admins\"\n    ]\n}\n</code></pre> </li> <li> <p>Response 201 (application/json)</p> </li> <li> <p>Headers</p> <pre><code>    Location: /user/ad609b8d-ae9b-4487-bff4-8b1f995a323d\n</code></pre> </li> <li> <p>Body</p> <pre><code>     {\n       \"name\": \"Miles Morales\",\n       \"created_at\": \"2019-09-25T12:01:41.091Z\",\n       \"updated_at\": \"2019-09-25T12:01:41.091Z\",\n       \"email\": \"miles.morales@email.com\",\n       \"groups\": [\n         \"worker\",\n         \"heroes\",\n         \"admins\"\n       ]\n       \"url\": \"/user/ad609b8d-ae9b-4487-bff4-8b1f995a323d\",\n    }\n</code></pre> </li> <li> <p>Response 401 (application/json)</p> </li> <li> <p>Body</p> <pre><code>     {\n        \"message\": \"You're not allowed to perform this action\"\n     }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-auth/#update-a-user-patch","title":"Update a User [PATCH]","text":"<p>You may update a user info (if you are the user or if you have this permission) using this action. It takes a JSON object containing a user and all the infos you want to update.</p> <ul> <li>name (string) - The user name (optional)</li> <li>email (string) - The user e-mail (optional)</li> <li> <p>groups (array[string]) - The list of groups which the user will have access (optinal)</p> </li> <li> <p>Request (application/json)</p> <pre><code>    {\n        \"groups\": [\n            \"workers\",\n            \"heroes\"\n        ]\n    }\n</code></pre> </li> <li> <p>Response 201 (application/json)</p> </li> <li> <p>Headers</p> <pre><code>    Location: /user/ad609b8d-ae9b-4487-bff4-8b1f995a323d\n</code></pre> </li> <li> <p>Body</p> <pre><code>    {\n        \"name\": \"Miles Morales\",\n        \"created_at\": \"2019-09-25T12:01:41.091Z\",\n        \"updated_at\": \"2019-09-26T08:15:38.920Z\",\n        \"email\": \"miles.morales@email.com\",\n        \"groups\": [\n           \"worker\",\n           \"heroes\"\n        ]\n        \"url\": \"/user/ad609b8d-ae9b-4487-bff4-8b1f995a323d\",\n    }\n</code></pre> </li> <li> <p>Response 401 (application/json)</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"message\": \"You're not allowed to perform this action\"\n    }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-auth/#remove-a-user-delete","title":"Remove a User [DELETE]","text":"<p>You may remove a user (if you have this permission) using this action.</p> <ul> <li> <p>Response 200</p> </li> <li> <p>Response 401</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"message\": \"You're not allowed to perform this action\"\n    }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-paycheck/","title":"Paycheck","text":"<p>Paycheck is a API used to manage all workers paycheck, benefits and others questions related to wage. You can view his documentation over at API Paycheck Module.</p> <p>API Link: Paycheck Apiary</p> <p>This API blueprint resource can be found at API Paycheck Blueprint.</p>"},{"location":"interfaces/api-paycheck/#paycheck-api-root-","title":"Paycheck API Root [/]","text":"<p>This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body.</p> <p>It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details.</p>"},{"location":"interfaces/api-paycheck/#retrieve-the-entry-point-get","title":"Retrieve the Entry Point [GET]","text":"<ul> <li>Response 200 (application/json)<pre><code>    {\n        \"paycheck\": \"/payroll\"\n    }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-paycheck/#group-payroll","title":"Group Payroll","text":"<p>Resources related to questions in the API.</p>"},{"location":"interfaces/api-paycheck/#payroll-payrollyearmonthpayroll_numberstatusvaluefiltervalue","title":"Payroll [/payroll/{year}/{month}/{payroll_number}{?{status}={value}&amp;{filter}={value}}]","text":"<p>A Payroll object has the following attributes:</p> <ul> <li>payroll_number</li> <li>year</li> <li>month</li> <li>status</li> <li>employees</li> <li> <p>payment</p> </li> <li> <p>Parameters</p> </li> <li>payroll_number: 1 (optional, number) - Number of the Payroll in form of an integer</li> <li>year: 2019 (optional, number) - The year of the Payroll</li> <li>month: 2 (optional, number) - The month of the Payroll</li> <li>status: true (optional, boolean) - The status of the paycheck (true if active, false otherwise)</li> </ul>"},{"location":"interfaces/api-paycheck/#view-a-payroll-details-get","title":"View a Payroll Details [GET]","text":"<ul> <li> <p>Request (URL)</p> <pre><code>URL: /payroll/2019/8/1?status=true\n</code></pre> </li> <li> <p>Response 200 (application/json)</p> <pre><code>{\n    \"payroll_number\": 1,\n    \"year\": 2019,\n    \"month\": 8,\n    \"status\": true,\n    \"employees\": [\n      \"Miles Morales\",\n      \"Peter Parker\"\n    ],\n    \"payment\": [\n      1.99,\n      1.99\n    ]\n}\n</code></pre> </li> </ul>"},{"location":"interfaces/api-paycheck/#create-a-new-payroll-post","title":"Create a new Payroll [POST]","text":"<p>You may create a new payroll (if you have this permission) using this action. It takes a URL with the creation parameters. If there is a payroll for the given year and month, a new one will be created and the last one will be deactivated.</p> <ul> <li>year (number) - The year of the Payroll</li> <li> <p>month (string) - The month of the Payroll</p> </li> <li> <p>Request (URL)</p> <pre><code>URL: /payroll/2019/9\n</code></pre> </li> <li> <p>Response 200 (application/json)</p> <pre><code>{\n    \"payroll_number\": 1,\n    \"year\": 2019,\n    \"month\": 9,\n    \"status\": true,\n    \"employees\": null,\n    \"payment\": null,\n}\n</code></pre> </li> <li> <p>Response 200 (application/json)</p> <pre><code>{\n    \"new_payroll\": {\n      \"payroll_number\": 2,\n      \"year\": 2019,\n      \"month\": 9,\n      \"status\": true,\n      \"employees\": null,\n      \"payment\": null,\n    },\n    \"old_payroll\": {\n      \"payroll_number\": 1,\n      \"year\": 2019,\n      \"month\": 9,\n      \"status\": true,\n      \"employees\": [\n        \"Miles Morales\",\n        \"Peter Parker\"\n     ],\n      \"payment\": [\n        1.99,\n        1.99\n      ]\n    }\n\n}\n</code></pre> </li> <li> <p>Response 401 (application/json)</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"message\": \"You're not allowed to perform this action\"\n    }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-paycheck/#update-information-on-the-payroll-patch","title":"Update information on the Payroll [PATCH]","text":"<p>You may update the payroll (if you have this permission) using this action. It takes a JSON with the objects you want to update. The updatable parameters are the following (if the objects is already fullfiled it will be overwrited):</p> <ul> <li>status (boolean) - The status of the paycheck</li> <li>employees (array[string]) - The list of employees that will be payed on that payroll</li> <li> <p>payment (array[float]) - The value of the employees salary</p> </li> <li> <p>Request (URL)</p> <pre><code>URL: /payroll/2019/9/2\n</code></pre> </li> <li> <p>Request (application/json)</p> <pre><code>{\n    \"employees\": [\n      \"Steve Rogers\",\n      \"Miles Morales\",\n      \"Peter Parker\"\n    ],\n    \"payment: [\n      3.99,\n      1.99,\n      1.99\n    ]\n}\n</code></pre> </li> <li> <p>Response 200 (application/json)</p> <pre><code>{\n    \"payroll_number\": 1,\n    \"year\": 2019,\n    \"month\": 9,\n    \"status\": true,\n    \"employees\": [\n      \"Steve Rogers\",\n      \"Miles Morales\",\n      \"Peter Parker\"\n    ],\n    \"payment\": [\n      3.99,\n      1.99,\n      1.99\n    ]\n}\n</code></pre> </li> <li> <p>Response 401 (application/json)</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"message\": \"You're not allowed to perform this action\"\n    }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-paycheck/#delete-payroll-delete","title":"Delete Payroll [DELETE]","text":"<p>You may create a new payroll (if you have this permission) using this action. It takes a URL with the search to delete parameters. Caution, this action is irreversible.</p> <ul> <li> <p>Request (URL)</p> <pre><code>URL: /payroll/2019/9/2\n\nOR\n\nURL: /payroll/2019?month=9&amp;status=false\n</code></pre> </li> <li> <p>Response 200 (application/json)</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"deleted_payrolls\": [2]\n    }\n\n    OR\n\n    {\n        \"deleted_payrolls\": [2, 3]\n    }\n</code></pre> </li> <li> <p>Response 401 (application/json)</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"message\": \"You're not allowed to perform this action\"\n    }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-register/","title":"Register","text":"<p>Register is a simple API to manage employees. You can view this documentation over at API Vacation Module.</p> <p>API Link: Paycheck Apiary</p> <p>This API blueprint resource can be found at API Register Blueprint.</p>"},{"location":"interfaces/api-register/#register-api-root-","title":"Register API Root [/]","text":"<p>This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body.</p> <p>It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details.</p>"},{"location":"interfaces/api-register/#retrieve-the-entry-point-get","title":"Retrieve the Entry Point [GET]","text":"<ul> <li>Response 200 (application/json)<pre><code>{\n    \"employee\": \"/employee\",\n    \"relative\": \"/relative\"\n}\n</code></pre> </li> </ul>"},{"location":"interfaces/api-register/#group-employee","title":"Group Employee","text":"<p>Resources related to employees in the API.</p>"},{"location":"interfaces/api-register/#employee-employeeregister","title":"Employee [/employee/{register}]","text":"<p>A Employee object has the following attributes:</p> <ul> <li>register</li> <li>hired_at - An RFC3339 date when the employee was hired.</li> <li>fired_at - An RFC3339 date when the employee was fired, if don't null.</li> <li>name - The name of the employee</li> <li>position - The name of the employee position</li> <li> <p>gross_salary - The gross amount of the employee salary in form of a float</p> </li> <li> <p>Parameters</p> </li> <li>register: 1 (required, number) - ID of the Employee in form of an integer</li> </ul>"},{"location":"interfaces/api-register/#view-a-employee-detail-get","title":"View a Employee Detail [GET]","text":"<ul> <li>Response 200 (application/json)<pre><code>{\n    \"register\": 1,\n    \"hired_at\":  \"1962-08-15T08:00:00.000Z\",\n    \"fired_at\": null,\n    \"name\": \"Peter Parker\",\n    \"position\": \"Friendly Neighborhood\",\n    \"gross_salary\": 1.99\n}\n</code></pre> </li> </ul>"},{"location":"interfaces/api-register/#hire-a-new-employee-post","title":"Hire a New Employee [POST]","text":"<p>You may hire a new employee (if you have this permission) using this action. It takes a JSON object containing a employee and his infos. On this action you don't have to add <code>{register}</code> in the URL.</p> <ul> <li>name (string) - The employee name</li> <li>position (string) - The employee position</li> <li> <p>gross_salary (float) - The employee gross salary</p> </li> <li> <p>Request (application/json)</p> <pre><code>{\n    \"name\": \"Nick Fury\",\n    \"position\": \"SHIELD Leader\",\n    \"gross_salary\": 99999.99\n}\n</code></pre> </li> <li> <p>Response 201 (application/json)</p> </li> <li> <p>Headers</p> <pre><code>    Location: /employee/4\n</code></pre> </li> <li> <p>Body</p> <pre><code>    {\n        \"register\": 4\n        \"name\": \"Nick Fury\",\n        \"hired_at\": \"2019-09-30T11:30:41.789Z\",\n        \"fired_at\": null,\n        \"position\": \"SHIELD Leader\",\n        \"gross_salary\": 99999.99\n    }\n</code></pre> </li> <li> <p>Response 401 (application/json)</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"message\": \"You're not allowed to perform this action\"\n    }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-register/#update-a-employee-patch","title":"Update a Employee [PATCH]","text":"<p>You may update a employee information (if you have this permission) using this action. It takes a JSON object containing a employee and the info that you want to update.</p> <ul> <li>name (string) - The employee name</li> <li>position (string) - The employee position</li> <li> <p>gross_salary (float) - The employee gross salary</p> </li> <li> <p>Request (application/json)</p> <pre><code>{\n    \"position\": \"SHIELD Chief\",\n    \"gross_salary\": 9999999.99\n}\n</code></pre> </li> <li> <p>Response 201 (application/json)</p> </li> <li> <p>Headers</p> <pre><code>    Location: /employee/4\n</code></pre> </li> <li> <p>Body</p> <pre><code>    {\n        \"register\": 4,\n        \"name\": \"Nick Fury\",\n        \"hired_at\": \"2019-09-30T11:30:41.789Z\",\n        \"fired_at\": null,\n        \"position\": \"SHIELD Chief\",\n        \"gross_salary\": 9999999.99\n    }\n</code></pre> </li> <li> <p>Response 401 (application/json)</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"message\": \"You're not allowed to perform this action\"\n    }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-register/#fire-a-employee-delete","title":"Fire a Employee [DELETE]","text":"<p>You may fire a employee (if you have this permission) using this action. His information will remain in the system but the <code>fired_at</code> attribute will receive the date of the action.</p> <ul> <li> <p>Response 200</p> </li> <li> <p>Headers</p> <pre><code>    Location: /employee/4\n</code></pre> </li> <li> <p>Body</p> <pre><code>    {\n        \"register\": 4,\n        \"name\": \"Nick Fury\",\n        \"hired_at\": \"2019-09-30T11:30:41.789Z\",\n        \"fired_at\": \"2020-09-30T08:01:12.812Z\",\n        \"position\": \"SHIELD Chief\",\n        \"gross_salary\": 9999999.99\n    }\n</code></pre> </li> <li> <p>Response 401</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"message\": \"You're not allowed to perform this action\"\n    }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-register/#group-relative","title":"Group Relative","text":"<p>Resources related to relatives in the API.</p>"},{"location":"interfaces/api-register/#relative-relativeemployee_registerid","title":"Relative [/relative/{employee_register}/{id}]","text":"<p>A Relative object has the following attributes:</p> <ul> <li>employee_register</li> <li>id</li> <li>name</li> <li> <p>kinship</p> </li> <li> <p>Parameters</p> </li> <li>employee_register: 1 (required, number) - ID of the employee which is related to the relative in form of an integer</li> <li>id: 1 (required, number) - ID of the relative in form of an integer</li> </ul>"},{"location":"interfaces/api-register/#view-a-relative-detail-get","title":"View a Relative Detail [GET]","text":"<ul> <li>Response 200 (application/json)<pre><code>{\n    \"employee_register\": 1,\n    \"id\": 1,\n    \"name\": \"May Parker\",\n    \"kinship\": \"Aunt\"\n}\n</code></pre> </li> </ul>"},{"location":"interfaces/api-register/#add-a-new-relative-post","title":"Add a New Relative [POST]","text":"<p>You may add a new relative (if you have this permission) using this action. It takes a JSON object containing a relative and his infos. On this action you don't have to add the relative <code>{id}</code> in the URL, only the <code>{employee_register}</code>.</p> <ul> <li>name (string) - The relative name</li> <li> <p>kinship (string) - The relative kinship type name</p> </li> <li> <p>Request (application/json)</p> <pre><code>{\n    \"name\": \"Mary Jane Watson\",\n    \"kinship\": \"Wife\"\n}\n</code></pre> </li> <li> <p>Response 201 (application/json)</p> </li> <li> <p>Headers</p> <pre><code>    Location: /relative/1/2\n</code></pre> </li> <li> <p>Body</p> <pre><code>    {\n        \"id\": 2,\n        \"employee_register\": 1,\n        \"name\": \"Mary Jane Watson\",\n        \"kinship\":  \"Wife\"\n    }\n</code></pre> </li> <li> <p>Response 401 (application/json)</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"message\": \"You're not allowed to perform this action\"\n    }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-register/#update-a-relative-patch","title":"Update a Relative [PATCH]","text":"<p>You may update a relative information (if you have this permission) using this action. It takes a JSON object containing a relative and the info that you want to update.</p> <ul> <li>name (string) - The relative name</li> <li> <p>kinship (string) - The relative kinship type name</p> </li> <li> <p>Request (application/json)</p> <pre><code>    {\n        \"name\": \"Mary Jane Watson\",\n        \"kinship\": \"Ex-Wife\"\n    }\n</code></pre> </li> <li> <p>Response 201 (application/json)</p> </li> <li> <p>Headers</p> <pre><code>    Location: /relative/1/2\n</code></pre> </li> <li> <p>Body</p> <pre><code>    {\n        \"id\": 2,\n        \"employee_register\": 1,\n        \"name\": \"Mary Jane Watson\",\n        \"kinship\":  \"Ex-Wife\"\n    }\n</code></pre> </li> <li> <p>Response 401 (application/json)</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"message\": \"You're not allowed to perform this action\"\n    }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-register/#remove-a-relative-delete","title":"Remove a Relative [DELETE]","text":"<p>You may remove a relative (if you have this permission) using this action.</p> <ul> <li> <p>Response 200</p> </li> <li> <p>Headers</p> <pre><code>    Location: /relative/1\n</code></pre> </li> <li> <p>Body</p> <pre><code>    {\n        \"old_value\": {\n            \"employee_register\": 1,\n            \"name\": \"Mary Jane Watson\",\n            \"kinship\":  \"Ex-Wife\"\n        }\n    }\n</code></pre> </li> <li> <p>Response 401</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"message\": \"You're not allowed to perform this action\"\n    }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-vacation/","title":"Vacation","text":"<p>Vacation is a simple API to manage employees vacations and vacation scheduling. You can view this documentation over at API Vacation Module.</p> <p>API Link: Paycheck Apiary</p> <p>This API blueprint resource can be found at API Vacation Blueprint.</p>"},{"location":"interfaces/api-vacation/#vacation-api-root-","title":"Vacation API Root [/]","text":"<p>This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body.</p> <p>It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details.</p>"},{"location":"interfaces/api-vacation/#retrieve-the-entry-point-get","title":"Retrieve the Entry Point [GET]","text":"<ul> <li>Response 200 (application/json)<pre><code>    {\n        \"vacation\": \"/vacation\"\n    }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-vacation/#group-vacation","title":"Group Vacation","text":"<p>Resources related to questions in the API.</p>"},{"location":"interfaces/api-vacation/#vacation-vacationyearmonth","title":"Vacation [/vacation/{year}/{month}]","text":"<p>A Question object has the following attributes:</p> <ul> <li>year - An integer representing the year</li> <li>month - An integer representing the month</li> <li>number_employees - An integer representing how many employees have vacation</li> <li> <p>employees - An array of Employees objects with vacation info</p> </li> <li> <p>Parameters</p> </li> <li>year: 2019 (required, number) - Given vacation year</li> <li>month: 9 (required, number) - Given vacation month</li> </ul>"},{"location":"interfaces/api-vacation/#view-a-vacation-detail-get","title":"View a Vacation Detail [GET]","text":"<ul> <li>Response 200 (application/json)<pre><code>{\n    \"year\": 2019,\n    \"month\": \"september\",\n    \"number_employees\": 2,\n    \"employees\": [\n      {\n        \"register\": 1,\n        \"name\": \"Peter Parker\",\n        \"start\": \"2019-09-01\",\n        \"end\": \"2019-09-15\"\n      },\n      {\n        \"register\": 2,\n        \"name\": \"Miles Morales\",\n        \"start\": \"2019-09-15\",\n        \"end\": \"2019-09-30\"\n      }\n    ]\n}\n</code></pre> </li> </ul>"},{"location":"interfaces/api-vacation/#createupdate-a-employee-vacation-post","title":"Create/Update a Employee Vacation [POST]","text":"<p>You may create/update a employee vacation (if you have this permission) using this action. It takes a JSON object containing a employee and all vacation infos. If the employee with the given register already exist this action will override the information. The employee-vacation object have the following structure.</p> <ul> <li>register (integer) - The employee register</li> <li>name (string) - The employee name</li> <li>start (date) - The start date of the employee vacation</li> <li> <p>end (date) - The end date of the employee vacation</p> </li> <li> <p>Request (application/json)</p> <pre><code>{\n    \"register\": 3\n    \"name\": \"Tony Stark\",\n    \"start\": \"2019-09-01\",\n    \"end\": \"2019-09-30\"\n}\n</code></pre> </li> <li> <p>Response 201 (application/json)</p> </li> <li> <p>Headers</p> <pre><code>    Location: /vacation/2019/9\n</code></pre> </li> <li> <p>Body</p> <pre><code>    {\n        \"year\": 2019,\n        \"month\": \"september\",\n        \"number_employees\": 3\n    }\n</code></pre> </li> <li> <p>Response 401 (application/json)</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"message\": \"You're not allowed to perform this action\"\n    }\n</code></pre> </li> </ul>"},{"location":"interfaces/api-vacation/#remove-a-employee-vacation-delete","title":"Remove a Employee Vacation [DELETE]","text":"<p>You may remove a employee vacation (if you have this permission) using this action. It takes a JSON object containing a employee register. The employee-vacation object have the following structure.</p> <ul> <li> <p>register (integer or array[integer]) - The employee register</p> </li> <li> <p>Request (application/json)</p> <pre><code>{\n    \"register\": [2, 3]\n}\n</code></pre> </li> <li> <p>Response 201 (application/json)</p> </li> <li> <p>Headers</p> <pre><code>    Location: /vacation/2019/9\n</code></pre> </li> <li> <p>Body</p> <pre><code>    {\n        \"year\": 2019,\n        \"month\": \"september\",\n        \"number_employees\": 1\n    }\n</code></pre> </li> <li> <p>Response 401 (application/json)</p> </li> <li> <p>Body</p> <pre><code>    {\n        \"message\": \"You're not allowed to perform this action\"\n    }\n</code></pre> </li> </ul>"},{"location":"modules/api-auth/","title":"HR System - Auth API","text":"<p>The Auth API is responsible to manage all the system authentication and security in the HR system. The API was create to manage all access groups between the employees of the organization.</p>"},{"location":"modules/api-auth/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.7.3</li> <li>Flask 1.1.1</li> <li>python-keycloak 0.17.5</li> </ul>"},{"location":"modules/api-auth/#configuration","title":"Configuration","text":"<p>The Auth API configuration is through operating system environment variables. Therefore the configuration must be done in host or must be passed to the container environment.</p> <p>The available settings are:</p> <ul> <li><code>HTTP_PORT</code>: HTTP port number on which the service will be available.</li> <li><code>DATABASE_HOST</code>: Database server network address.</li> <li><code>DATABASE_PORT</code>: Port on which database service is available.</li> <li><code>DATABASE_NAME</code>: Schema name available for the service.</li> <li><code>DATABASE_USER</code>: Username for database authentication.</li> <li><code>DATABASE_PASSWORD</code>: User password for database authentication.</li> <li><code>KEYCLOAK_ADMIN</code>: Keycloak API admin username.</li> <li><code>KEYCLOAK_PASSWORD</code>: User password for Keycloak API authentication.</li> </ul> <p>If you have questions about how to set environment variables check these links:</p> <ul> <li>Environment Variables - Linux</li> <li>Environment Variables - Docker</li> </ul> <p>Observation: The system was developed to run in Linux and Docker environments. No official support for Windows.</p>"},{"location":"modules/api-auth/#development","title":"Development","text":""},{"location":"modules/api-auth/#installing-virtualenvwrapper","title":"Installing VirtualEnvWrapper","text":"<p>We recommend using a virtual environment created by the virtualenvwrapper module. There is a virtual site with English instructions for installation that can be accessed here. But you can also follow these steps below for installing the environment:</p> <pre><code>sudo python3 -m pip install -U pip             # Update pip\nsudo python3 -m pip install virtualenvwrapper  # Install virtualenvwrapper module\n</code></pre> <p>Observation: If you do not have administrator access on the machine remove <code>sudo</code> from the beginning of the command and add the flag <code>--user</code> to the end of the command.</p> <p>Now configure your shell to use virtualenvwrapper by adding these two lines to your shell initialization file (e.g. <code>.bashrc</code>,<code>.profile</code>, etc.)</p> <pre><code>export WORKON_HOME=\\$HOME/.virtualenvs\nsource /usr/local/bin/virtualenvwrapper.sh\n</code></pre> <p>If you want to add a specific project location (will automatically go to the project folder when the virtual environment is activated) just add a third line with the following <code>export</code>:</p> <pre><code>export PROJECT_HOME=/path/to/project\n</code></pre> <p>Run the shell startup file for the changes to take effect, for example:</p> <pre><code>source ~/.bashrc\n</code></pre> <p>Now create a virtual environment with the following command (entering the name you want for the environment), in this example I will use the name auth:</p> <pre><code>mkvirtualenv -p $(which python3) auth\n</code></pre> <p>To use it:</p> <pre><code>workon auth\nsudo python3 -m pip install pipenv\npipenv install # Will install all of the project dependencies\n</code></pre> <p>Observaion: Again, if necessary, add the flag <code>--user</code> to make the pipenv package installation for the local user.</p>"},{"location":"modules/api-auth/#local-execution","title":"Local Execution","text":"<p>For local system execution, run the following command in the project root folder (assuming virtualenv is already active):</p> <pre><code>python src/main.py\n</code></pre> <p>This will run the system on localhost and will be available on the <code>HTTP_PORT</code> port configured for the system. This way you can test new implementations.</p>"},{"location":"modules/api-auth/#tests","title":"Tests","text":"<p>To run the Auth API tests follow the script below:</p> <ol> <li>Enable virtualenv auth;</li> <li> <p>Ensure that the dependencies are installed, especially:</p> <pre><code>pytest\npytest-coverage\nflake8\n</code></pre> </li> <li> <p>Run the commands below:</p> </li> </ol> <pre><code>export PYTHONPATH=$(pwd)                   # Set the python path as the project folder\npytest src/                                # Performs the tests\npytest --cov=auth src/                     # Performs tests evaluating coverage\npytest --cov=auth --cov-report xml src/    # Generate the XML report of coverage\nflake8 src/                                # Run PEP8 linter\nunset PYTHONPATH                           # Unset PYTHONPATH variable\n</code></pre> <p>During the tests the terminal will display a output with the test report (failures, skips and successes) and the system test coverage. For other configurations and supplemental documentation go to pytest and coverage.</p> <p>During the lint process the terminal will report a bug report and warnings from the PEP8 style guide, for more configurations and additional documentation go to flake8 and PEP8</p>"},{"location":"modules/api-auth/#build","title":"Build","text":"<p>To build the API Auth service just follow the script below:</p> <pre><code>docker build -t api-auth:&lt;version&gt; .\n</code></pre> <p>Setting the version on <code>&lt;version&gt;</code>. E.g.: <code>latest</code>, <code>stable</code>, <code>alpha</code>, <code>1.0.0</code> and etc.</p> <p>Make sure you have logged in to the docker hub service. If you do not, run the <code>docker login</code> command.</p> <pre><code>docker push api-auth:&lt;version&gt;\n</code></pre> <p>Finally, if the system will be executed by the built container docker, execute:</p> <pre><code>docker run -d --name api-auth -e .env api-auth\n</code></pre> <p>Observation: Assumes that the settings are listed in the <code>.env</code> file. For more settings, execution options, and supplemental documentation, go to Docker</p>"},{"location":"modules/api-paycheck/","title":"HR System - Paycheck API","text":"<p>The Payments API is responsible for querying and processing employee pay data in the context of the organization's people management. The API was created out of the human resources system's need, but it was designed to allow access to query services by other systems and services that require employee payroll information.</p>"},{"location":"modules/api-paycheck/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.7.3</li> <li>Flask 1.1.1</li> </ul>"},{"location":"modules/api-paycheck/#configuration","title":"Configuration","text":"<p>The Paycheck API configuration is through operating system environment variables. Therefore the configuration must be done on the host or must be passed to the container environment.</p> <p>The available settings are:</p> <ul> <li><code>HTTP_PORT</code>: HTTP port number on which the service will be available.</li> <li><code>DECIMAL_PLACES</code>: Number of decimal places to display calculations.</li> <li><code>PAYCHECK_CURRENCY</code>: Which are the currency for the payment amounts. Available <code>BRL (R$)</code> and <code>USD (US$)</code>.</li> </ul> <p>If you have questions about how to set environment variables check these links:</p> <ul> <li>Environment Variables - Linux</li> <li>Environment Variables - Docker</li> </ul> <p>Observation: The system was developed to run in Linux and Docker environments. No official support for Windows.</p>"},{"location":"modules/api-paycheck/#development","title":"Development","text":""},{"location":"modules/api-paycheck/#installing-virtualenvwrapper","title":"Installing VirtualEnvWrapper","text":"<p>We recommend using a virtual environment created by the virtualenvwrapper module. There is a virtual site with English instructions for installation that can be accessed here. But you can also follow these steps below for installing the environment:</p> <pre><code>sudo python3 -m pip install -U pip             # Update pip\nsudo python3 -m pip install virtualenvwrapper  # Install virtualenvwrapper module\n</code></pre> <p>Observation: If you do not have administrator access on the machine remove <code>sudo</code> from the beginning of the command and add the flag <code>--user</code> to the end of the command.</p> <p>Now configure your shell to use virtualenvwrapper by adding these two lines to your shell initialization file (e.g. <code>.bashrc</code>,<code>.profile</code>, etc.)</p> <pre><code>export WORKON_HOME=\\$HOME/.virtualenvs\nsource /usr/local/bin/virtualenvwrapper.sh\n</code></pre> <p>If you want to add a specific project location (will automatically go to the project folder when the virtual environment is activated) just add a third line with the following <code>export</code>:</p> <pre><code>export PROJECT_HOME=/path/to/project\n</code></pre> <p>Run the shell startup file for the changes to take effect, for example:</p> <pre><code>source ~/.bashrc\n</code></pre> <p>Now create a virtual environment with the following command (entering the name you want for the environment), in this example I will use the name paycheck:</p> <pre><code>mkvirtualenv -p $(which python3) paycheck\n</code></pre> <p>To use it:</p> <pre><code>workon paycheck\nsudo python3 -m pip install pipenv\npipenv install # Will install all of the project dependencies\n</code></pre> <p>Observaion: Again, if necessary, add the flag <code>--user</code> to make the pipenv package installation for the local user.</p>"},{"location":"modules/api-paycheck/#local-execution","title":"Local Execution","text":"<p>For local system execution, run the following command in the project root folder (assuming virtualenv is already active):</p> <pre><code>python src/main.py\n</code></pre> <p>This will run the system on localhost and will be available on the <code>HTTP_PORT</code> port configured for the system. This way you can test new implementations.</p>"},{"location":"modules/api-paycheck/#tests","title":"Tests","text":"<p>To run the Paycheck API tests follow the script below:</p> <ol> <li>Enable virtualenv paycheck;</li> <li> <p>Ensure that the dependencies are installed, especially:</p> <pre><code>pytest\npytest-coverage\nflake8\n</code></pre> </li> <li> <p>Run the commands below:</p> </li> </ol> <pre><code>export PYTHONPATH=$(pwd)                       # Set the python path as the project folder\npytest src/                                    # Performs the tests\npytest --cov=paycheck src/                     # Performs tests evaluating coverage\npytest --cov=paycheck --cov-report xml src/    # Generate the XML report of coverage\nflake8 src/                                    # Run PEP8 linter\nunset PYTHONPATH                               # Unset PYTHONPATH variable\n</code></pre> <p>During the tests the terminal will display a output with the test report (failures, skips and successes) and the system test coverage. For other configurations and supplemental documentation go to pytest and coverage.</p> <p>During the lint process the terminal will report a bug report and warnings from the PEP8 style guide, for more configurations and additional documentation go to flake8 and PEP8</p>"},{"location":"modules/api-paycheck/#build","title":"Build","text":"<p>To build the API Paycheck service just follow the script below:</p> <pre><code>docker build -t api-paycheck:&lt;version&gt; .\n</code></pre> <p>Setting the version on <code>&lt;version&gt;</code>. E.g.: <code>latest</code>, <code>stable</code>, <code>alpha</code>, <code>1.0.0</code> and etc.</p> <p>Make sure you have logged in to the docker hub service. If you do not, run the <code>docker login</code> command.</p> <pre><code>docker push api-paycheck:&lt;version&gt;\n</code></pre> <p>Finally, if the system will be executed by the built container docker, execute:</p> <pre><code>docker run -d --name api-paycheck -e .env api-paycheck\n</code></pre> <p>Observation: Assumes that the settings are listed in the <code>.env</code> file. For more settings, execution options, and supplemental documentation, go to Docker</p>"},{"location":"modules/api-register/","title":"HR System - Register API","text":"<p>The Register API is responsible for retrieving and maintaining data regarding the registration of employees in the context of HR management of the organization. The API was created out of HR system necessity, but it was designed for being used by other systems and services that require employee data.</p>"},{"location":"modules/api-register/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.7.3</li> <li>Flask 1.1.1</li> </ul>"},{"location":"modules/api-register/#configuration","title":"Configuration","text":"<p>You should set environment variables up in the operational system in order to prepare the API for use. Therefore the configuration must be done in the host OS or should be passed to the container environment.</p> <p>The available settings are:</p> <ul> <li><code>HTTP_PORT</code>: HTTP port number on which the service will be available.</li> <li><code>DATABASE_HOST</code>: Database server network address.</li> <li><code>DATABASE_PORT</code>: Port on which database service is available.</li> <li><code>DATABASE_NAME</code>: Schema name available for the service.</li> <li><code>DATABASE_USER</code>: Username for database authentication.</li> <li><code>DATABASE_PASSWORD</code>: User password for database authentication.</li> </ul> <p>If you have questions about how to set environment variables check these links:</p> <ul> <li>Environment Variables - Linux</li> <li>Environment Variables - Docker</li> </ul> <p>Observation: The system was developed to run in Linux and Docker environments. No official support for Windows.</p>"},{"location":"modules/api-register/#development","title":"Development","text":""},{"location":"modules/api-register/#installing-virtualenvwrapper","title":"Installing VirtualEnvWrapper","text":"<p>We recommend using a virtual environment created by the virtualenvwrapper module. There is a virtual site with English instructions for installation that can be accessed here. But you can also follow these steps below for installing the environment:</p> <pre><code>sudo python3 -m pip install -U pip             # Update pip\nsudo python3 -m pip install virtualenvwrapper  # Install virtualenvwrapper module\n</code></pre> <p>Observation: If you do not have administrator access on the machine remove <code>sudo</code> from the beginning of the command and add the flag <code>--user</code> to the end of the command.</p> <p>Now configure your shell to use virtualenvwrapper by adding these two lines to your shell initialization file (e.g. <code>.bashrc</code>,<code>.profile</code>, etc.)</p> <pre><code>export WORKON_HOME=\\$HOME/.virtualenvs\nsource /usr/local/bin/virtualenvwrapper.sh\n</code></pre> <p>If you want to add a specific project location (will automatically go to the project folder when the virtual environment is activated) just add a third line with the following <code>export</code>:</p> <pre><code>export PROJECT_HOME=/path/to/project\n</code></pre> <p>Run the shell startup file for the changes to take effect, for example:</p> <pre><code>source ~/.bashrc\n</code></pre> <p>Now create a virtual environment with the following command (entering the name you want for the environment), in this example I will use the name register:</p> <pre><code>mkvirtualenv -p $(which python3) register\n</code></pre> <p>To use it:</p> <pre><code>workon register\nsudo python3 -m pip install pipenv\npipenv install # Will install all of the project dependencies\n</code></pre> <p>Observaion: Again, if necessary, add the flag <code>--user</code> to make the pipenv package installation for the local user.</p>"},{"location":"modules/api-register/#local-execution","title":"Local Execution","text":"<p>For local system execution, run the following command in the project root folder (assuming virtualenv is already active):</p> <pre><code>python src/main.py\n</code></pre> <p>This will run the system on localhost and will be available on the <code>HTTP_PORT</code> port configured for the system. This way you can test new implementations.</p>"},{"location":"modules/api-register/#tests","title":"Tests","text":"<p>To run the Register API tests follow the script below:</p> <ol> <li>Enable virtualenv register;</li> <li> <p>Ensure that the dependencies are installed, especially:</p> <pre><code>pytest\npytest-coverage\nflake8\n</code></pre> </li> <li> <p>Run the commands below:</p> </li> </ol> <pre><code>export PYTHONPATH=$(pwd)                       # Set the python path as the project folder\npytest src/                                    # Performs the tests\npytest --cov=register src/                     # Performs tests evaluating coverage\npytest --cov=register --cov-report xml src/    # Generate the XML report of coverage\nflake8 src/                                    # Run PEP8 linter\nunset PYTHONPATH                               # Unset PYTHONPATH variable\n</code></pre> <p>During the tests the terminal will display a output with the test report (failures, skips and successes) and the system test coverage. For other configurations and supplemental documentation go to pytest and coverage.</p> <p>During the lint process the terminal will report a bug report and warnings from the PEP8 style guide, for more configurations and additional documentation go to flake8 and PEP8</p>"},{"location":"modules/api-register/#build","title":"Build","text":"<p>To build the API Register service just follow the script below:</p> <pre><code>docker build -t api-register:&lt;version&gt; .\n</code></pre> <p>Setting the version on <code>&lt;version&gt;</code>. E.g.: <code>latest</code>, <code>stable</code>, <code>alpha</code>, <code>1.0.0</code> and etc.</p> <p>Make sure you have logged in to the docker hub service. If you do not, run the <code>docker login</code> command.</p> <pre><code>docker push api-register:&lt;version&gt;\n</code></pre> <p>Finally, if the system will be executed by the built container docker, execute:</p> <pre><code>docker run -d --name api-register -e .env api-register\n</code></pre> <p>Observation: Assumes that the settings are listed in the <code>.env</code> file. For more settings, execution options, and supplemental documentation, go to Docker</p>"},{"location":"modules/api-vacation/","title":"HR System - Vacation API","text":"<p>The Vacation API is responsible for querying and managing employee vacation data in the context of the organization's people management. The API was created out of the need for the human resources system, but it was designed to be used by other systems and services that require employee vacation information.</p>"},{"location":"modules/api-vacation/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.7.3</li> <li>Flask 1.1.1</li> </ul>"},{"location":"modules/api-vacation/#configuration","title":"Configuration","text":"<p>Vacation API configuration is done through operating system environment variables. Therefore the configuration must be done on the host or must be passed to the container environment.</p> <p>The available settings are:</p> <ul> <li><code>HTTP_PORT</code>: HTTP port number on which the service will be available.</li> <li><code>DATABASE_HOST</code>: Database server network address.</li> <li><code>DATABASE_PORT</code>: Port on which database service is available.</li> <li><code>DATABASE_NAME</code>: Schema name available for the service.</li> <li><code>DATABASE_USER</code>: Username for database authentication.</li> <li><code>DATABASE_PASSWORD</code>: User password for database authentication.</li> <li><code>CALENDAR_API_URL</code>: API URL providing dates handled for vacation appointments.</li> </ul> <p>If you have questions about how to set environment variables check these links:</p> <ul> <li>Environment Variables - Linux</li> <li>Environment Variables - Docker</li> </ul> <p>Observation: The system was developed to run in Linux and Docker environments. No official support for Windows.</p>"},{"location":"modules/api-vacation/#development","title":"Development","text":""},{"location":"modules/api-vacation/#installing-virtualenvwrapper","title":"Installing VirtualEnvWrapper","text":"<p>We recommend using a virtual environment created by the virtualenvwrapper module. There is a virtual site with English instructions for installation that can be accessed here. But you can also follow these steps below for installing the environment:</p> <pre><code>sudo python3 -m pip install -U pip             # Update pip\nsudo python3 -m pip install virtualenvwrapper  # Install virtualenvwrapper module\n</code></pre> <p>Observation: If you do not have administrator access on the machine remove <code>sudo</code> from the beginning of the command and add the flag <code>--user</code> to the end of the command.</p> <p>Now configure your shell to use virtualenvwrapper by adding these two lines to your shell initialization file (e.g. <code>.bashrc</code>,<code>.profile</code>, etc.)</p> <pre><code>export WORKON_HOME=\\$HOME/.virtualenvs\nsource /usr/local/bin/virtualenvwrapper.sh\n</code></pre> <p>If you want to add a specific project location (will automatically go to the project folder when the virtual environment is activated) just add a third line with the following <code>export</code>:</p> <pre><code>export PROJECT_HOME=/path/to/project\n</code></pre> <p>Run the shell startup file for the changes to take effect, for example:</p> <pre><code>source ~/.bashrc\n</code></pre> <p>Now create a virtual environment with the following command (entering the name you want for the environment), in this example I will use the name vacation:</p> <pre><code>mkvirtualenv -p $(which python3) vacation\n</code></pre> <p>To use it:</p> <pre><code>workon vacation\nsudo python3 -m pip install pipenv\npipenv install # Will install all of the project dependencies\n</code></pre> <p>Observaion: Again, if necessary, add the flag <code>--user</code> to make the pipenv package installation for the local user.</p>"},{"location":"modules/api-vacation/#local-execution","title":"Local Execution","text":"<p>For local system execution, run the following command in the project root folder (assuming virtualenv is already active):</p> <pre><code>python src/main.py\n</code></pre> <p>This will run the system on localhost and will be available on the <code>HTTP_PORT</code> port configured for the system. This way you can test new implementations.</p>"},{"location":"modules/api-vacation/#tests","title":"Tests","text":"<p>To run the Vacation API tests follow the script below:</p> <ol> <li>Enable virtualenv vacation;</li> <li> <p>Ensure that the dependencies are installed, especially:</p> <pre><code>pytest\npytest-coverage\nflake8\n</code></pre> </li> <li> <p>Run the commands below:</p> </li> </ol> <pre><code>export PYTHONPATH=$(pwd)                       # Set the python path as the project folder\npytest src/                                    # Performs the tests\npytest --cov=vacation src/                     # Performs tests evaluating coverage\npytest --cov=vacation --cov-report xml src/    # Generate the XML report of coverage\nflake8 src/                                    # Run PEP8 linter\nunset PYTHONPATH                               # Unset PYTHONPATH variable\n</code></pre> <p>During the tests the terminal will display a output with the test report (failures, skips and successes) and the system test coverage. For other configurations and supplemental documentation go to pytest and coverage.</p> <p>During the lint process the terminal will report a bug report and warnings from the PEP8 style guide, for more configurations and additional documentation go to flake8 and PEP8</p>"},{"location":"modules/api-vacation/#build","title":"Build","text":"<p>To build the API Vacation service just follow the script below:</p> <pre><code>docker build -t api-vacation:&lt;version&gt; .\n</code></pre> <p>Setting the version on <code>&lt;version&gt;</code>. E.g.: <code>latest</code>, <code>stable</code>, <code>alpha</code>, <code>1.0.0</code> and etc.</p> <p>Make sure you have logged in to the docker hub service. If you do not, run the <code>docker login</code> command.</p> <pre><code>docker push api-vacation:&lt;version&gt;\n</code></pre> <p>Finally, if the system will be executed by the built container docker, execute:</p> <pre><code>docker run -d --name api-vacation -e .env api-vacation\n</code></pre> <p>Observation: Assumes that the settings are listed in the <code>.env</code> file. For more settings, execution options, and supplemental documentation, go to Docker</p>"},{"location":"modules/front-register/","title":"HR System - Register Web","text":"<p>Web application for HR System Register. Built on AngularJS, it allows the user to make use of the HR API and manage HR workflows. Register Web features a user-friendly interface with the system. Register Web also provides information on system executions and data so that the user is able to find common information from an HR workflow.</p>"},{"location":"modules/front-register/#dependencies","title":"Dependencies","text":"<ul> <li>Angular CLI 8.3.5</li> <li>Yarn 1.17.3</li> <li>Node.JS 10.16.3</li> </ul>"},{"location":"modules/front-register/#configuration","title":"Configuration","text":"<p>Register Web configuration is done through operating system environment variables. Therefore the configuration must be done in the container environment settings.</p> <p>The available settings are:</p> <ul> <li><code>REGISTER_API</code>: Register API URL.</li> <li><code>VACATION_API</code>: Vacation API URL.</li> <li><code>PAYCHECK_API</code>: Paycheck API URL.</li> </ul> <p>If you have questions about how to set environment variables check in:</p> <ul> <li>Environment Variables - Docker</li> </ul> <p>Observation: Remembering that the system was developed to run in Linux and Docker environments. No official support for Windows.</p>"},{"location":"modules/front-register/#development","title":"Development","text":""},{"location":"modules/front-register/#installing-the-dependencies","title":"Installing the Dependencies","text":"<p>To install development dependencies make sure that the key project dependencies (<code>nodejs</code>,<code>angular-cli</code> and <code>yarn</code>) are installed. If so, just run the command below:</p> <pre><code>yarn install\n</code></pre> <p>At this point yarn will install all packages present in the <code>package.json</code> file and create a <code>node_modules</code> folder with the dependency files.</p> <p>Observation: If you want to isolate <code>nodejs</code> versions and dependencies between projects, visit the NVM project website, a node version manager.</p>"},{"location":"modules/front-register/#setting-the-environment-variables","title":"Setting the Environment Variables","text":"<p>For development execution you need to set the environment variables of the project. They are in the <code>environment.ts</code> file located at <code>&lt;project-path&gt;/src/environments</code>, and should be set as follows:</p> <pre><code>export const environment = {\n  production: false,\n  REGISTER_API: \"https://0.0.0.0:1234/register/api\",\n  VACATION_API: \"https://0.0.0.0:1234/vacation/api\",\n  PAYCHECK_API: \"https://0.0.0.0:1234/paycheck/api\",\n};\n</code></pre> <p>Remembering that <code>REGISTER_API</code>, <code>VACATION_API</code> and <code>PAYCHECK_API</code> must be the URL of the APIs deployed.</p>"},{"location":"modules/front-register/#local-deploy","title":"Local Deploy","text":"<p>For local system execution, follow the script below (assuming that the dependencies have been installed and the environment variables are properly set):</p> <pre><code>ng serve\n</code></pre> <p>This will run the system on localhost and will be available at the address <code>http://0.0.0.0:4200/</code>. This way you can test the new implementations and with each modification the application will reload the changes automatically.</p>"},{"location":"modules/front-register/#tests","title":"Tests","text":""},{"location":"modules/front-register/#running-unit-tests","title":"Running Unit Tests","text":"<p>To perform unit tests the system uses Karma, if the dependencies are already installed, simply run:</p> <pre><code>ng test\n</code></pre> <p>If you only want to run once add the flag <code>--watch=false</code>. Otherwise the system will be watching for changes to test them.</p>"},{"location":"modules/front-register/#running-end-to-end-tests","title":"Running End-to-End Tests","text":"<p>To perform end-to-end (E2E) testing the system uses Protractor, if the dependencies are already installed, simply run:</p> <pre><code>ng e2e\n</code></pre>"},{"location":"modules/front-register/#build","title":"Build","text":"<p>To build the Register Web service just follow the script below:</p> <pre><code>docker build -t frint-register:&lt;version&gt; .\n</code></pre> <p>Setting the version on <code>&lt;version&gt;</code>. E.g.: <code>latest</code>, <code>stable</code>, <code>alpha</code>, <code>1.0.0</code> and etc.</p> <p>Make sure you have logged in to the docker hub service, if you do not run the <code>docker login</code> command.</p> <pre><code>docker push front-register:&lt;version&gt;\n</code></pre> <p>Finally, if the system will be executed by the built docker container, execute:</p> <pre><code>docker run -d --name front-register -e .env front-register\n</code></pre> <p>If you want to build the system through Angular CLI to serve via host instead of containers, use the following command:</p> <pre><code>ng build\n</code></pre> <p>The build resources will be stored in the <code>dist/</code> folder. Use the <code>--prod</code> flag to build a production version. To execute simply serve via <code>nginx</code> or <code>apache</code> the resource present in the <code>dist/</code> folder to the web.</p> <p>Observation: Assumes that the settings are listed in the <code>.env</code> file. For more settings, execution options, and supplemental documentation, go to Docker</p>"},{"location":"solution/architecture/","title":"Architectural Representation","text":"<p>The following image architecturally represents how the components are arranged within the HR system.</p> <p><sup>1</sup></p> <p>This is the list of system components existing in the solution which have their documentation described in this documentation:</p> <ul> <li>Auth API</li> <li>Paycheck API</li> <li>Register API</li> <li>Vacation API</li> <li>HR UI</li> </ul> <p>If you'd like to see the each API interfaces, go to:</p> <ul> <li>Interface - Auth API</li> <li>Interface - Paycheck API</li> <li>Interface - Register API</li> <li>Interface - Vacation API</li> </ul> <ol> <li> <p>HR Software Architectural Diagram (SOURCE: Jo\u00e3o Pedro Sconetto)\u00a0\u21a9</p> </li> </ol>"},{"location":"solution/overview/","title":"System Overview","text":"<p>The human resources area is divided into three main areas: registration and maintenance of functional records, payment and benefits to employees, and personnel development.</p>"},{"location":"solution/overview/#personnel-records-area","title":"Personnel records area","text":"<p>The personnel records area comprises the activities of registering employees data that are relevant for the payroll activities. It comprises employees records and their vacations.</p>"},{"location":"solution/overview/#personnel-payment-area","title":"Personnel payment area","text":"<p>The personnel payment area comprises the organization's payroll activities, such as payment of salary and benefits, as well as discounting fees and taxes.</p>"},{"location":"solution/overview/#personnel-development-area","title":"Personnel development area","text":"<p>The personnel development area comprises the actions of monitoring, evaluating and developing the employee within the company. The activities in this area are not supported by the HR System.</p>"}]}